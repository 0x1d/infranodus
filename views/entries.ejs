<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/jquery.textcomplete.css' />
    <link rel="stylesheet" href="/stylesheets/side-menu.css">
    <link rel="stylesheet" href="/stylesheets/jquery-ui.min.css">
    <link rel='stylesheet' href='/stylesheets/style.css' />



</head>
<body>
<% include statsabove %>
<div id="layout">
    <!-- Menu toggle -->
    <a href="#menu" id="menuLink" class="menu-link">
    <!-- Hamburger icon -->
    <span></span>
    </a>

    <a href="javascript:" id="graph-link">
    <!-- Graph icon -->
    <span></span>
    </a>

    <div id="menu">
        <div class="pure-menu pure-menu-open">
        <% if (locals.user) { %>
        <a class="pure-menu-heading" href="/"><%= user.name %></a>
            <br>
            <ul id="contexts" class="contexts">

            </ul>
        &nbsp;<br><br>

        <% } else { %>
            <% include menu %>

        <% } %>
        </div>

    </div>


    <div id='content'>

        <div id='statements'>
            <% include messages %>

            <form action='/post' name='submitform' id="submitform" method='post' class='pure-form'>

                    <textarea columns="40" rows="4" name='entry[body]' id="statement" placeholder='enter a note here to visualize the words and their connections. to add a new list, use a @mention'><% if (url) { %><%= urltitle %> <%= url %> @bookmarks<% } %></textarea>
                    <input type="hidden" name="context" value="<%= context %>">
                    <input type="hidden" id="selectedContexts" name="selectedContexts" value="">
                    <input type="hidden" name="statementid" value="">
                    &nbsp;<br>
                    <input type='submit' name="submit" value="save" class="pure-button pure-button-primary">

            </form>   &nbsp;<br>&nbsp;<br>




            <% entries.forEach(function(entry) { %>
                <div class='entry' data-uid='<%= entry.uid %>' data-hashtags='<%= entry.name %>'>
                    <p><%- entry.text %></p>
                </div>
            <% }) %>

            <% if (context && entries.length > 2) { %>
            <form action='/post' name='deletecontext' id="deletecontext" method='post' class='pure-form'>

                <input type="hidden" name="context" value="<%= context %>">
                <input type="hidden" id="selectedContexts" name="selectedContexts" value="">
                <input type="hidden" name="statementid" value="">
                &nbsp;<br>
                <input type='submit' name="delete" value="delete list" class="pure-button pure-button-primary">

            </form>
            <% } %>
        </div>

        <div id="graph-container"></div>

        <div id="graph-tools"><a href="javascript:" id="zoom-in"><img src="/images/zoom-in.png" border="0"></a>&nbsp;&nbsp;&nbsp;<a href="javascript:" id="zoom-out"><img src="/images/zoom-out.png" border="0"></a></div>

    </div>




</div>

<script src="/javascripts/sigma/sigma.min.js"></script>
<script src="/javascripts/sigma/plugins/sigma.parsers.json.min.js"></script>
<script src="/javascripts/sigma/plugins/sigma.layout.forceAtlas2.js"></script>
<script src="/javascripts/sigma/plugins/sigma.plugins.animate.min.js"></script>
<script src="/javascripts/jquery.min.js"></script>
<script src="/javascripts/jquery-ui.min.js"></script>
<script src="/javascripts/string.min.js"></script>
<script src="/javascripts/underscore-min.js"></script>
<script src="/javascripts/jquery.textcomplete.js"></script>
<script src='/javascripts/jquery.autosize.js'></script>
<script src="/javascripts/ui.js"></script>
<script src="/javascripts/jquery.mobile-events.min.js"></script>
<script src="/javascripts/jquery.highlight-4.js"></script>




<script>
;(function(){

// Create node ID - Name index for filtering
var nodeIDs = [];

// What are the concepts displayed - the opposite of above
var nodeNames = [];

// Let's record all the unique edges we've got

var edgesList = [];

// Create context-node index for filtering
var contextNodeID = [];

// Create statement-node index for filtering
var nodesOfStatement = [];

// What are the concepts present in the graph?
var contextNames = [];

// What are the concepts present in the graph?
var statementsOfContext = [];

// Path to the JSON graph file (specific context or a general one)
    <% if (addcontext) { %>
        var jsonpath = '/api/user/nodes/<%= context %>?addcontext=<%= addcontext %>';
        var addcontext = "<%= addcontext %>";
    <% } else { %>
        var jsonpath = '/api/user/nodes/<%= context %>';
        var addcontext = "";
    <% }  %>


// Get current context
var path = window.location.pathname;
var current_context = path.match(/([^\/]*)\/*$/)[1];

// These are the nodes clicked in the graph
var pinnedNodes = [];



// Is the user going to look at somebody else's graph?

<% if (perceivername) { %>
    jsonpath = '/api/public/nodes/<%= perceivername %>';
<% } %>


// The button to hide / show statements

$("#graph-link").click(function(e) {
    e.preventDefault();
    $("#statements").fadeToggle();
});

// Add a method to the graph model that returns an
// object with every neighbors of a node inside:

sigma.classes.graph.addMethod('neighbors', function(nodeId) {
    var k,
            neighbors = {},
            index = this.allNeighborsIndex[nodeId] || {};

    for (k in index)
        neighbors[k] = this.nodesIndex[k];

    return neighbors;
});

// Initialize JSON parser for SIGMA visualization

sigma.parsers.json(
        jsonpath,
        {
            container: 'graph-container',
            renderer: {
                container: document.getElementById('graph-container'),
                type: 'canvas'
            },
            settings: {
                minNodeSize: 5,
                maxNodeSize: 16,
                minEdgeSize: 0.5,
                maxEdgeSize: 2,
                labelThreshold: 8
            }
        },
        function(sigma) {

            var i,
                    timeout = 4000,
                    nodes = sigma.graph.nodes(),
                    color_context = '#666',
                    color_addcontext = '#666688',
                    len = nodes.length;


            // This is a fix for JSON
            // Sigma requires that nodes have X, Y, Size and Color properties which our JSON doesn't have. So we add them.
            // We also make the initial graph layout circular, so that ForceAtlas always looks the same

            for (i = 0; i < len; i++) {
                var angle = Math.PI * 2 * i / len;
                nodes[i].x = Math.cos(angle);
                nodes[i].y = Math.sin(angle);
                nodes[i].size = sigma.graph.degree(nodes[i].id);
                nodes[i].color = color_context;
            }

            // We first need to save the original colors and LABELS of our
            // nodes and edges, like this:

            sigma.graph.edges().forEach(function(e) {

                var unique_edge_id = '';

                // Let's see if the edge source in alphabetical order is further than its target and change places

                if (e.source > e.target) {
                    unique_edge_id = e.target + '-' + e.source;
                }
                else {
                    unique_edge_id = e.source + '-' + e.target;
                }


                // Let's make a unique list of edges to count how many there are of the same kind

                if (edgesList[unique_edge_id]) {
                    ++edgesList[unique_edge_id];

                    // TODO this is a bit of a workaround - in the future could be better to distribute the weight evenly
                    e.size = e.weight + edgesList[unique_edge_id];
                }
                else {
                    edgesList[unique_edge_id] = 1;
                    e.size = e.weight;
                }


                e.originalColor = e.color;

                // Make an index of nodes to context
                if (contextNodeID[e.edge_context]) {
                    if (contextNodeID[e.edge_context].indexOf(e.source) < 0)
                        contextNodeID[e.edge_context].push(e.source);
                    if (contextNodeID[e.edge_context].indexOf(e.target) < 0)
                        contextNodeID[e.edge_context].push(e.target);
                }
                else {
                    contextNodeID[e.edge_context] = [];
                    contextNodeID[e.edge_context].push(e.source);
                    contextNodeID[e.edge_context].push(e.target);
                }

                // Make an index of nodes to statement
                if (nodesOfStatement[e.statement_id]) {
                    if (nodesOfStatement[e.statement_id].indexOf(e.source) < 0)
                        nodesOfStatement[e.statement_id].push(e.source);
                    if (nodesOfStatement[e.statement_id].indexOf(e.target) < 0)
                        nodesOfStatement[e.statement_id].push(e.target);
                }
                else {
                    nodesOfStatement[e.statement_id] = [];
                    nodesOfStatement[e.statement_id].push(e.source);
                    nodesOfStatement[e.statement_id].push(e.target);
                }

                if (statementsOfContext[e.edge_context]) {
                    if (statementsOfContext[e.edge_context].indexOf(e.statement_id) < 0)
                        statementsOfContext[e.edge_context].push(e.statement_id);
                }
                else {
                    statementsOfContext[e.edge_context] = [];
                    statementsOfContext[e.edge_context].push(e.statement_id);
                }

            });

            sigma.graph.nodes().forEach(function(n) {

                // Check if the node is in additional context and if yes, give it a different color
                if (addcontext) {
                    if (contextNodeID[addcontext].indexOf(n.id) > -1 && contextNodeID[current_context].indexOf(n.id) > -1) {
                        n.color = color_addcontext;
                    }
                }


                // Save node's default color, for hide and show later
                n.originalColor = n.color;
                n.originalLabel = n.label;

                // Creating an index of node labels to IDs for filtering
                nodeIDs[n.label] = n.id;

            });


            // Make a list of all the node labels displayed in the graph (for Autofill)

            nodeNames = _.keys(nodeIDs);

            for (var w=0;w<nodeNames.length;w++) {
                nodeNames[w] = S(nodeNames[w]).dasherize().chompLeft('-').s;
            }

            // Get the context names - all the contexts that exist in the graph we just loaded
            contextNames = _.keys(contextNodeID);


            // Put the contexts into the menu
            populateContextMenu(contextNames,nodeNames);


            // Do ForceAtlasLayout

            sigma.startForceAtlas2();

            // Don't run it forever not to overheat :)

            setTimeout(function() {
                sigma.stopForceAtlas2();
            },timeout);

            // When a node is clicked, we check for each node
            // if it is a neighbor of the clicked one. If not,
            // we set its color as grey, and else, it takes its
            // original color.
            // We do the same for the edges, and we only keep
            // edges that have both extremities colored.

            sigma.bind('clickNode', function(e) {

                var nodeId = e.data.node.id;
                var nodeLabel = e.data.node.originalLabel;



                var toKeep = [];

                console.log('x: ' + e.data.node['renderer1:x'] + ', y:' + e.data.node['renderer1:y'], ', size: ' + e.data.node['renderer1:size']);

                var contextsToHighlight = [];

                // Which statements the node is in? (so we can keep them on the graph

                var statementsToKeep = [];

                for (var index in nodesOfStatement) {
                    if (nodesOfStatement[index].indexOf(nodeId) > -1) statementsToKeep.push(index);
                }

                // What contexts does this statement appear in?

/*
                for (var index in statementsOfContext) {
                    for (var s=0;s<statementsToKeep.length;++s) {
                         if (statementsOfContext[index].indexOf(statementsToKeep[s]) > -1) contextsToHighlight.push(index);
                    }
                }

                contextsToHighlight = $.unique(contextsToHighlight);

                console.log(contextsToHighlight);
*/




                sigma.graph.edges().forEach(function(e) {
                    if (statementsToKeep.indexOf(e.statement_id) > -1) {
                        toKeep.push(e.source);
                        toKeep.push(e.target);
                        e.color = e.originalColor;
                    }
                    else {
                        e.color = '#ddd';
                    }
                });

                sigma.graph.nodes().forEach(function(n) {
                    if (toKeep.indexOf(n.id) > -1) {
                        n.color = n.originalColor;
                    }
                    else {
                        n.color = '#ddd';
                    }
                });

                sigma.refresh();



                $(".entry").each(function(){
                    var currentDiv = $(this).attr('data-uid');

                    if (statementsToKeep.indexOf(currentDiv) > -1) {
                        $(this).removeClass('hidden');
                        $(this).css('opacity','1');
                    }
                    else {
                        $(this).addClass('hidden');
                    }



                });

                // Was the node clicked already? No? Add it to array of clicked nodes.
                if (pinnedNodes.indexOf(nodeLabel) < 0) {
                    pinnedNodes.push(nodeLabel);
                    $(".entry").removeHighlight();
                    for (i=0; i<pinnedNodes.length; i++) {
                        $(".entry").highlight(pinnedNodes[i]);
                    }

                }
                else {
                    var pinnedIndex = pinnedNodes.indexOf(nodeLabel);
                    if (pinnedIndex > -1) {
                        pinnedNodes.splice(pinnedIndex,1);
                        $(".entry").removeHighlight();
                        for (i=0; i<pinnedNodes.length; i++) {
                            $(".entry").highlight(pinnedNodes[i]);
                        }
                    }

                }
                console.log(pinnedNodes);

            });


            // Show node's label when we're over it

            sigma.bind('overNode', function(e) {
                e.data.node.label = e.data.node.originalLabel;
                sigma.refresh();
            });



            // Hide node's label when we're out of it

            sigma.bind('outNode', function(e) {
                if (e.data.node.color != e.data.node.originalColor) {
                    e.data.node.label = '';
                }
                sigma.refresh();
            });

            // Zoom Graph Control

            var c = sigma.camera;


            $("#zoom-in").on('click', function(e) {
                // Zoom in - single frame :
                c.goTo({
                    ratio: c.ratio / c.settings('zoomingRatio')
                });
            });

            $("#zoom-out").on('click', function(e) {
                // Zoom out - single frame :
                c.goTo({
                    ratio: c.ratio * c.settings('zoomingRatio')
                });
            });




        }
);


// TODO: 1. Add search function by #hashtag; 2. Attach that same function to hashtag doubleclick;

// Auto-resize to fill content;

    $(document).ready(function(){

        // Make texarea automatically resizeable
        $('textarea').autosize();


        // Statement edit / delete functionality

        $(".entry").on('dblclick doubletap', function(e) {

            e.preventDefault();

            // Get the statement into the edit box at the top
            $("#statement").val(e.currentTarget.innerText);
            console.log(e.currentTarget.dataset.uid);

            // Retrieve that statement's ID into the hidden field (for edit or delete)
            $('input[name="statementid"]').val(e.currentTarget.dataset.uid);

            // Chang / add buttons
            document.submitform.submit.value = "edit";
            if (!document.submitform.delete) {
                $("#submitform").append('<input type="submit" name="delete" value="delete" class="pure-button"> <input type="submit" name="cancel" value="cancel" id="cancelbutton" class="pure-button">');

                // Delete text from the form in case of Cancel, remove the buttons

                document.getElementById('cancelbutton').addEventListener('click',function(){

                    $("#statement").val('');
                    document.submitform.submit.value = "save";
                    document.submitform.delete.remove();
                    document.submitform.cancel.remove();

                },false);            }

            // Smoothly scroll up
            $("html, body").animate({ scrollTop: 0 }, "slow");
        });


        // Highlight statement if clicked once

        $(".entry").on('click', function(e) {


            e.preventDefault();

            // A parameter to check if we're taking off the flag

            var alreadyClicked = null;

            // Make all entries semitrasparent

            $(".entry").each(function() {
                if ($(this).css('opacity') < 1) {
                    $(this).css('opacity', '1');
                    alreadyClicked = 1;
                }
                else {
                    $(this).css('opacity', '0.3');
                }
            });

            // The one clicked is not transparent

            $(this).css('opacity','1');

            var keepStatementID = e.currentTarget.dataset.uid;


            console.log(keepStatementID);

            // Make only those edges visible that belong to the statement selected

            if (!alreadyClicked) {

                sigma.instances(0).graph.edges().forEach(function(e) {

                    if (e.statement_id == keepStatementID) {
                        e.color = e.originalColor;
                    }
                    else {
                        e.color = '#ddd';
                    }

                });

                // Make only those nodes visible that belong to the statement selected

                sigma.instances(0).graph.nodes().forEach(function(n) {

                    // Is there no contexts at all? Show the node.
                    if (nodesOfStatement[keepStatementID].indexOf(n.id) < 0)  {
                        n.color = '#ddd';
                        n.label = '';
                    }
                    else {
                        n.color = n.originalColor;
                        n.label = n.originalLabel;
                    }
                });
            }
            else {

                sigma.instances(0).graph.edges().forEach(function(e) {
                        e.color = e.originalColor;
                });

                // Make only those nodes visible that belong to the statement selected

                sigma.instances(0).graph.nodes().forEach(function(n) {
                        n.color = n.originalColor;
                        n.label = n.originalLabel;
                });

            }

            sigma.instances(0).refresh();

        });
    });







    // Textarea select conversion to hashtags

    // For now it's disabled, but will be enabled for bulk statement correction later

    /*var getSelected = function(){
        var t = '';
        if(window.getSelection) {
            t = window.getSelection();
        } else if(document.getSelection) {
            t = document.getSelection();
        } else if(document.selection) {
            t = document.selection.createRange().text;
        }
        return t;
    }

    $("#statement").select(function(eventObject) {
        var selectedText = getSelected().toString();

        var statementReplace = $("#statement").val();

        if ((statementReplace.indexOf('@'+selectedText) === -1) && (selectedText !== statementReplace)) {

            var regex = RegExp(selectedText, "g");

            var dasherized = S(selectedText).dasherize().chompLeft('-').s;

            // TODO check words for morphology (if found, alert)

            var replacedString = statementReplace.replace(regex,"#" + dasherized).replace(/##/g,'#');
            $("#statement").val(replacedString);
        }

    });*/





    function addContextTriggers() {

    // TODO Add case for clicking viewAll, so it doesn't reload the page, but simply removes all filters

    // Find @Contexts and make them filter statements when clicked

        var contextsToFilter = [];


        $(".app-context-link").click(function(e) {
            e.preventDefault();
            var that = this;
            setTimeout(function() {
                var dblclick = parseInt($(that).data('double'), 10);
                if (dblclick > 0) {
                    $(that).data('double', dblclick-1);
                } else {
                    singleClick.call(that, e);
                }
            }, 300);
        }).dblclick(function(e) {
                    $(this).data('double', 2);
                    doubleClick.call(this, e);
                });


        // If double click on the menu, open it

        function singleClick (e) {

            window.location = e.target.href;

        }

        // If double click on a link, open it

        $(".app-url-link").on('click tap', function(e) {

              e.stopPropagation();

        });



        // If only one click, filter it

        function doubleClick (e) {

                var triggeredFromStatement = null;

                var addFilter = null;

                var removeFilter = null;

                // Extract filter label
                var filter = $(e.target).text();

                // Remove the first @ in case it's @mentions clicked from the statements
                if (filter.charAt(0) == '@') {
                    filter = filter.substr(1);
                    triggeredFromStatement = 1;
                }

                // Some tricks to make context switch from statements emulate menu items behavior
                if (triggeredFromStatement) {

                    // If the context is clicked inside the statement, we're just dealing with that event, not others
                    e.stopPropagation();

                    $(".menu-item-divided").each(function() {
                         if (S($(this).html()).stripTags().s == filter) {
                             if ($(this).hasClass('pure-menu-selected')) {
                                 $(this).removeClass('pure-menu-selected');
                                 removeFilter = 1;
                             }
                             else {
                                 $(this).addClass('pure-menu-selected');
                                 addFilter = 1;
                             }
                         }

                    });
                }

                // Index of that filter in our current contextsToFilter array
                var filterIndex = contextsToFilter.indexOf(filter);

                // Toggle menu highlights
                if ($(this).hasClass('pure-menu-selected') || removeFilter) {


                    // The context is to be removed
                    if (!removeFilter) {
                        $(this).removeClass('pure-menu-selected');
                    }

                    // Does it exist in the list of contexts to filter?
                    if (filterIndex > -1) {
                        contextsToFilter.splice(filterIndex, 1);
                    }

                    //TODO WTF is that?
                  /*  // Let's remove the nodes that belong to the removed context from the contextNodes
                    contextNodeID[to_remove_clean].forEach(function(element){
                        var index = $.inArray(element, contextNodes);
                        if (index>=0) contextNodes.splice(index, 1);
                    });*/


                     // Create context query for jQuery
                    var contextstring = '';

                    if (contextsToFilter.length >= 0) {
                        contextstring += ".entry:contains('@"+contextsToFilter[0]+"')";

                        for (var l=1;l<contextsToFilter.length;++l) {
                            contextstring += ", .entry:contains('@"+contextsToFilter[l]+"')";
                        }

                        $('.entry').addClass('hidden');
                        $(contextstring).removeClass('hidden');

                    }
                    else {
                        $('.entry').removeClass('hidden');
                    }


                    if (contextsToFilter.length < 1 && !$('#listall').hasClass('pure-menu-selected') && !(current_context)) {
                        $('#listall').addClass('pure-menu-selected');
                    }

                }
                else {
                    if (!addFilter) {
                        $(this).addClass('pure-menu-selected');
                    }

                    // Add this context to a list of contextToFilter
                    if (filterIndex < 0) {
                        contextsToFilter.push(filter);
                    }

                    // Show only those that have the context

                    var contextstring = '';
                    if (contextsToFilter.length >= 0) {
                        contextstring += ".entry:contains('@"+contextsToFilter[0]+"')";

                        for (var l=1;l<contextsToFilter.length;++l) {
                            contextstring += ", .entry:contains('@"+contextsToFilter[l]+"')";
                        }

                        $('.entry').addClass('hidden');
                        $(contextstring).removeClass('hidden');

                    }
                    else {
                        $('.entry').removeClass('hidden');
                    }


                    if ($('#listall').hasClass('pure-menu-selected')) {
                        $('#listall').removeClass('pure-menu-selected');
                    }


                }

                console.log(contextsToFilter);

                // Add contexts into the submission form
                document.getElementById('selectedContexts').value = contextsToFilter.join(',');

                console.log(document.getElementById('selectedContexts').value);

                // Add some remove @context functionality
                renderGraph(contextsToFilter);

         }

    }





    // Remove context filters function - launched only when a context is clicked

    function renderGraph(contextsToFilter) {

        // Creating the context index
        var nodesToKeep = [];

        var keepNodes = [];

        var keepEdges = [];

        // First, let's reiterate the graph and make a list of nodes and edges to keep

        if (contextsToFilter.length > 0) {

            sigma.instances(0).graph.edges().forEach(function(e) {

                // Reiterating through edges, leaving only the nodes that appear in at least one filtered context

                contextsToFilter.forEach(function(element){

                    if (contextNodeID[element].indexOf(e.source) > -1) {
                        keepNodes.push(e.source);
                    }

                    if (contextNodeID[element].indexOf(e.target) > -1) {
                        keepNodes.push(e.target);
                    }

                });

                // Keep edges that are in at least one of the filtered contexts

                if (contextsToFilter.indexOf(e.edge_context) > -1) {
                    keepEdges.push(e.id);
                }


            });
        }

        // Uniqualize to avoid duplicates

        keepNodes = $.unique(keepNodes);
        keepEdges = $.unique(keepEdges);

        // Then let's reiterate the graph edges and only show nodes that belong to the contexts created

        sigma.instances(0).graph.edges().forEach(function(e) {

            if (contextsToFilter.length == 0) {
                // Show the edge if there's no contexts at all
                e.color = e.originalColor;
            }

            else if (keepEdges.indexOf(e.id) > -1) {
                // The edge is in the list to keep => show it normal color
                e.color = e.originalColor;

                // The source of the edge is in the list to keep, so we will keep it.
                if (keepNodes.indexOf(e.source) > -1) {
                    nodesToKeep.push(e.source);
                }
                // The target of the edge is in the list to keep, so we will keep it also.
                if (keepNodes.indexOf(e.target) > -1) {
                    nodesToKeep.push(e.target);
                }
                // PS We only do this check for the nodes that belong to the edges that we keep
            }
            else {
                // Otherwise (the edge IS in the list for removal), so we color the edge invisible
                e.color = '#ddd';
            }



        });



        // Ensure no duplicates
        nodesToKeep = $.unique(nodesToKeep);

        // Now that we know which nodes to keep, let's reiterate through them all

        sigma.instances(0).graph.nodes().forEach(function(n) {

            // Is there no contexts at all? Show the node.
            if (contextsToFilter.length == 0) {
                n.color = n.originalColor;
                n.label = n.originalLabel;
            }

            // The node is not in the list to keep? Hide it!
            else if (nodesToKeep.indexOf(n.id) < 0)  {
                n.color = '#ddd';
                n.label = '';
            }

            // Looks like there is a filtering context function AND the node is in the keep list, so make it show!
            else {
                n.color = n.originalColor;
                n.label = n.originalLabel;
            }
        });


        // Refresh the graph (we do it through instances(0) as we're a bit outside of Sigma now)
        sigma.instances(0).refresh();


    }




    // Populate context menu

    function populateContextMenu (contextNames,nodeNames) {

        var search_field = '';

        var context_filters = '';

        var currentContextURL = '<li id="listall" class="menu-item-divided pure-menu-selected"><a href="/">all lists</a></li>';

        var addNewContext = '';

        var auxLinks = '';

        // The graph exists already?
        if (typeof contextNames[0] !== 'undefined' && contextNames[0] !== null) {
            contextNames.forEach(function(n) {
                if (n == current_context) {
                    context_filters += '<li class="app-context-link menu-item-divided pure-menu-selected"><a href="/contexts/' + n + '">' + n + '</a></li>';
                    currentContextURL = '<li id="listall" class="menu-item-divided"><a href="/">all lists</a></li>';
                }
                else {
                    context_filters += '<li class="app-context-link menu-item-divided "><a href="/contexts/' + n + '">' + n + '</a></li>';
                }
            });
        }
        // No graph, so show private
        else {
            context_filters += '<li class="app-context-link menu-item-divided"><a href="/contexts/private">private</a></li>';

        }

        addNewContext = '<li id="addNewContext" class="menu-item-divided"><a href="javascript:">+</a></li><li class="menu-item-divided">&nbsp;<a href="javascript:"></a></li>';



        search_field = '<form class="pure-form">' +
                       '&nbsp;<input type="text" id="search" size="9" maxlength="20" class="pure-input" placeholder="search">' +
                       '</form><br>';

        auxLinks = '<br>' +
                   '<li class="menu-item-small"><a href="/logout">logout</a></li>' +
                   '<li class="menu-item-small"><a href="/settings">settings</a></li>' +
                   '<li class="menu-item-small"><a href="/import">import</a></li>' +
                   '<li class="menu-item-small"><a href="/api/user/nodes/<%= context %>?gexf=1" target="_blank">export</a></li>' +
                   '<li class="menu-item-small"><a href="http://github.com/noduslabs/infranodus" target="_blank">help &amp; github</a></li>';

        document.getElementById('contexts').innerHTML = search_field +
                                                        currentContextURL +
                                                        context_filters +
                                                        addNewContext +
                                                        auxLinks;


        // Select range in textarea function

        $.fn.selectRange = function(start, end) {
            return this.each(function() {
                if (this.setSelectionRange) {
                    this.focus();
                    this.setSelectionRange(start, end);
                } else if (this.createTextRange) {
                    var range = this.createTextRange();
                    range.collapse(true);
                    range.moveEnd('character', end);
                    range.moveStart('character', start);
                    range.select();
                }
            });
        };

        // When add new context is clicked, add it into textarea and select it

        $(document).on("click", "#addNewContext", function(e){

            var beforeAdd = $("#statement").val();
            var afterAdd = beforeAdd + ' @newlist';
            var totalLength = afterAdd.length;
            $("#statement").val(afterAdd);
            $("#statement").focus();
            $('#statement').selectRange(totalLength-7,totalLength);

        });

        // Now time to trigger the actions we want to have when user clicks on the contexts
        addContextTriggers();

        // Initialize autofill for hashtags and contexts
        autofill(nodeNames,contextNames);


        // Autocomplete for search input
         $("#search").autocomplete({
             source: nodeNames,
             minLength: 1,
             messages: {
                 noResults: '',
                 results: function() {}
             },
             select: function(event, ui) {

                 var filter = ui.item.value;

                 // Create context query for jQuery
                 var conceptstring = ":contains('" + filter + "')";

                 // Filter text statements
                 $('.entry').addClass('hidden');
                 $('.entry'+conceptstring).removeClass('hidden');


                 sigma.instances(0).graph.nodes().filter(function(n) {
                      if (n.originalLabel === filter) {
                          var nodeId = n.id,
                          toKeep = sigma.instances(0).graph.neighbors(nodeId);
                          toKeep[nodeId] = n;

                          sigma.instances(0).graph.nodes().forEach(function(n) {
                              if (toKeep[n.id])  {
                                  n.color = n.originalColor;
                                  n.label = n.originalLabel;
                              }
                              else  {
                                  n.color = '#ddd';
                                  n.label = '';
                              }
                          });

                          sigma.instances(0).graph.edges().forEach(function(e) {
                              if (toKeep[e.source] && toKeep[e.target])
                                  e.color = e.originalColor;
                              else
                                  e.color = '#ddd';
                          });

                          // Since the data has been modified, we need to
                          // call the refresh method to make the colors
                          // update effective.
                          sigma.instances(0).refresh();
                      }
                  });
             }
         });


    }




    // Autofill initialized only after Sigma above loaded and populated all the nodes

    function autofill(nodeNames,contextNames) {

        $('#statement').textcomplete([
            { // hashtags-concepts
                words: nodeNames,
                match: /\B#(\w*)$/,
                search: function (term, callback) {
                    callback($.map(this.words, function (word) {
                        return word.indexOf(term) === 0 ? word : null;
                    }));
                },
                index: 1,
                replace: function (word) {

                    return '#' + word + ' ';

                }
            },
            { // html
                mentions: contextNames,
                match: /\B@(\w*)$/,
                search: function (term, callback) {
                    callback($.map(this.mentions, function (mention) {
                        return mention.indexOf(term) === 0 ? mention : null;
                    }));
                },
                index: 1,
                replace: function (mention) {
                    return '@' + mention + ' ';
                }
            },
            { // hashtags-concepts
                words: nodeNames,
                match: /\b(\w{2,})$/,
                search: function (term, callback) {
                    callback($.map(this.words, function (word) {
                        return word.indexOf(term) === 0 ? word : null;
                    }));
                },
                index: 1,
                replace: function (word) {

                        return word + ' ';

                }
            }

        ]);





        $('#addcontext').textcomplete([
            { // html
                mentions: contextNames,
                match: /\b(\w{2,})$/,
                search: function (term, callback) {
                    callback($.map(this.mentions, function (mention) {
                        return mention.indexOf(term) === 0 ? mention : null;
                    }));
                },
                index: 1,
                replace: function (mention) {
                    window.open("?addcontext=" + mention, "_self");
                    return '@' + mention + '';
                }
            }
        ]);
    }




})();
</script>
<% include statsbelow %>
</body>
</html>