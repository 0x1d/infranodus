<a href="javascript:" id="addcontext-link" class="tooltip editorpane" title="compare to context">
        <!-- Addcontext icon -->
        <span></span>
    </a>

    <a href="javascript:" class="tooltip" title="hide the text pane" id="statements-link">
         <span></span>
     </a> 
   
    <a href="javascript:" class="tooltip" title="make graph dynamic" id="timer-link">
         <span></span>
     </a> 
   
     <a href="javascript:" class="tooltip" title="play dynamic graph" id="watch-link">
         <span></span>
     </a> 

     <a href="javascript:" class="tooltip" title="show tutorial" id="walkthrough"></a>


<script>

toggleStatementsButton().onClick(toggleStatements);
addContextButton().onClick(addContext);

// Are we viewing additional context?
if (addcontext) {
     $('#addcontext-link').addClass('addcontext-visible');
}

function toggleStatements() {  
    if (checkEntriesMode().visibility() == 'VISIBLE') {
        entries().hide();
    }
    else if (checkEntriesMode().visibility() == 'HIDDEN') {
        entries().show();
    }
}

function addContext() {
    if ($(".addcontext-on").is(":visible")) {
              $('#addcontext-link').removeClass('addcontext-on');
          }
    else {
              $('#addcontext-link').addClass('addcontext-on');
    }

}

function toggleStatementsButton() {
    return {
        onClick: function(onClick){
            $('#statements-link').on('click', onClick)
        }
    }
}

function addContextButton() {
    return {
        onClick: function(onClick){
            $('#addcontext-link').on('click', onClick)
        }
    }
}



    // Dynamic graph functionality

    // It basically makes only the nodes / edges of the graph visible that the user is currently seeing in the statements div

    var dynamic_graph = 0;

    var dynamic_watch = 0;

    $("#timer-link").click(function(e) {
      if (dynamic_graph == 0) {
        //localStorage.setItem('timer',1);
        dynamic_graph = 1;
        $('#timer-link').addClass('timer-link-on');
        $('#entries').scrollTop($('#entries').scrollTop() + 1);
      }
      else {
        dynamic_graph = 0;
        //localStorage.setItem('timer',0);
        $('#timer-link').removeClass('timer-link-on');
        entryScroll('',true);
        if (dynamic_watch == 1) {
          $("#watch-link").trigger('click');
        }

      }

    });



    // Dynamically watch the graph unfold

    $("#watch-link").click(function(e) {

    if (dynamic_watch == 0) {
        var speed_scroll = 1000;
        dynamic_watch = 1;

        $('#watch-link').addClass('watch-link-on');

        if (dynamic_graph == 0) {
        $("#timer-link").trigger('click');
        }

        var max_scroll = $('#entries')[0].scrollHeight - $('#entries').height();

        function autoScrollUp(){
        
            var current_scroll = ($('#entries').scrollTop());
            var scroll_to = max_scroll;
            var num_entries =  $('.entry').length;

            if (current_scroll == max_scroll) {
                $('#entries').scrollTop(0);
                current_scroll = $('#entries').scrollTop();
            }
            var play_time = Math.round(((max_scroll - current_scroll)/max_scroll) * num_entries * speed_scroll);

            $("#entries").animate({scrollTop: scroll_to},play_time,"linear", autoScrollUp); // and animate
        }

        autoScrollUp();

    }
    else  {
        dynamic_watch = 0;
        $('#watch-link').removeClass('watch-link-on');
        $("#entries").stop();

    }
    });


    

</script>