<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1">
    <title>Capture the Dream Patterns</title>
    <meta name="description" content="Capture the re-occuring patterns in your dreams to make sense of them." />
    <meta name="keywords"  content="tna, text network analysis, network, text, dataviz, bigdata" />



    <link rel="stylesheet" type="text/css" href="/stylesheets/jquery.fullPage.css" />
    <link rel="stylesheet" type="text/css" href="/stylesheets/fullPage.extras.css" />
    <link type="text/css" rel="stylesheet" href="/stylesheets/featherlight.css" title="Featherlight Styles" />



    <style>

            /* Sections
             * --------------------------------------- */

        .intro p{
            width: 50%;
            margin: 0 auto;
            font-size: 1.5em;
            z-index:10;
        }
        .twitter-share-button{
            position: absolute;
            z-index: 99;
            right: 149px;
            top: 9px;
        }


        #section0{
            background: #000000;
        }
        #section1{
            background: #000000;
        }
        #section2{
            background: #000000;
        }

        #section3{
            background: #000000;

        }
        #section4{
            background: -webkit-gradient(linear, top left, bottom left, from(#f8a3dc), to(#a0b6ff));
            background: -webkit-linear-gradient(#f8a3dc, #a0b6ff);
            background: linear-gradient(#f8a3dc,#a0b6ff);

        }
        #network-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }
        #slide2{
            background: #000000;

        }
        #slide3{
            background: -webkit-gradient(linear, top left, bottom left, from(#92a1ca), to(#76c2bd));
            background: -webkit-linear-gradient(#92a1ca, #76c2bd);
            background: linear-gradient(#7BAABE,#969AC6);
        }
        #slide5{
            background: #000000;

        }


    </style>
    <!--[if IE]>
    <script type="text/javascript">
        var console = { log: function() {} };
    </script>
    <![endif]-->

    <script src="/javascripts/jquery.min.js"></script>
    <script src="/javascripts/jquery-ui.min.js"></script>
    <script src="/javascripts/TweenLite.min.js"></script>
    <script src="/javascripts/featherlight.js"></script>

    <script src="/javascripts/EasePack.min.js"></script>

    <script type="text/javascript" src="/javascripts/jquery.fullPage.js"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            $('#fullpage').fullpage({
                anchors: ['home', 'features', 'usecases', 'about'],
                menu: '#menu',
                scrollOverflow: true,
                responsive: 800,
                loopTop: true,
                loopBottom: true
            });

           /* $('#content-box').animate({scrollLeft: 100}, 800);*/

            $(".menuhit").click(function(){
                var moveby = $(this).position().left;
                $('#content-box').animate({scrollLeft: moveby-10}, 800);
                return true;
            });



            var width, height, canvas, ctx, points, target, animateHeader = true;

            // Main
            initHeader();
            initAnimation();
            addListeners();

            function initHeader() {
                width = window.innerWidth;
                height = window.innerHeight;
                target = {x: width/2, y: height/2};

                //console.log("test",document.getElementById('large-header'));

                canvas = document.getElementById('network-canvas');
                canvas.width = width;
                canvas.height = height;
                ctx = canvas.getContext('2d');

                // create points
                points = [];
                for(var x = 0; x < width; x = x + width/20) {
                    for(var y = 0; y < height; y = y + height/20) {
                        var px = x + Math.random()*width/20;
                        var py = y + Math.random()*height/20;
                        var p = {x: px, originX: px, y: py, originY: py };
                        points.push(p);
                    }
                }

                // for each point find the 5 closest points
                for(var i = 0; i < points.length; i++) {
                    var closest = [];
                    var p1 = points[i];
                    for(var j = 0; j < points.length; j++) {
                        var p2 = points[j]
                        if(!(p1 == p2)) {
                            var placed = false;
                            for(var k = 0; k < 6; k++) {
                                if(!placed) {
                                    if(closest[k] == undefined) {
                                        closest[k] = p2;
                                        placed = true;
                                    }
                                }
                            }

                            for(var k = 0; k < 6; k++) {
                                if(!placed) {
                                    if(getDistance(p1, p2) < getDistance(p1, closest[k])) {
                                        closest[k] = p2;
                                        placed = true;
                                    }
                                }
                            }
                        }
                    }
                    p1.closest = closest;
                }

                // assign a circle to each point
                for(var i in points) {
                    var c = new Circle(points[i], 2+Math.random()*10, 'rgba(255,255,255,0.3)');
                    points[i].circle = c;
                }
            }

            // Event handling
            function addListeners() {
                if(!('ontouchstart' in window)) {
                    window.addEventListener('mousemove', mouseMove);
                }
                window.addEventListener('scroll', scrollCheck);
                window.addEventListener('resize', resize);
            }

            function mouseMove(e) {
                var posx = posy = 0;
                if (e.pageX || e.pageY) {
                    posx = e.pageX;
                    posy = e.pageY;
                }
                else if (e.clientX || e.clientY)    {
                    posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                    posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
                }
                target.x = posx;
                target.y = posy;
            }

            function scrollCheck() {
                if(document.body.scrollTop > height) animateHeader = false;
                else animateHeader = true;
            }

            function resize() {
                width = window.innerWidth;
                height = window.innerHeight;
                canvas.width = width;
                canvas.height = height;
            }

            // animation
            function initAnimation() {
                animate();
                for(var i in points) {
                    shiftPoint(points[i]);
                }
            }

            function animate() {
                if(animateHeader) {
                    ctx.clearRect(0,0,width,height);
                    for(var i in points) {
                        // detect points in range
                        if(Math.abs(getDistance(target, points[i])) < 4000) {
                            points[i].active = 0.3;
                            points[i].circle.active = 0.8;
                        } else if(Math.abs(getDistance(target, points[i])) < 20000) {
                            points[i].active = 0.1;
                            points[i].circle.active = 0.5;
                        } else if(Math.abs(getDistance(target, points[i])) < 40000) {
                            points[i].active = 0.02;
                            points[i].circle.active = 0.3;
                        } else {
                            points[i].active = 0;
                            points[i].circle.active = 0;
                        }

                        drawLines(points[i]);
                        points[i].circle.draw();
                    }
                }
                requestAnimationFrame(animate);
            }

            function shiftPoint(p) {
                TweenLite.to(p, 1+1*Math.random(), {x:p.originX-50+Math.random()*100,
                    y: p.originY-50+Math.random()*100, ease:Circ.easeInOut,
                    onComplete: function() {
                        shiftPoint(p);
                    }});
            }

            // Canvas manipulation
            function drawLines(p) {
                if(!p.active) return;
                for(var i in p.closest) {
                    ctx.beginPath();
                    ctx.moveTo(p.x, p.y);
                    ctx.lineTo(p.closest[i].x, p.closest[i].y);
                    ctx.strokeStyle = 'rgba(156,217,249,'+ p.active+')';
                    ctx.stroke();
                }
            }

            function Circle(pos,rad,color) {
                var _this = this;

                // constructor
                (function() {
                    _this.pos = pos || null;
                    _this.radius = rad || null;
                    _this.color = color || null;
                })();

                this.draw = function() {
                    if(!_this.active) return;
                    ctx.beginPath();
                    ctx.arc(_this.pos.x, _this.pos.y, _this.radius, 0, 2 * Math.PI, false);
                    ctx.fillStyle = 'rgba(156,217,249,'+ _this.active+')';
                    ctx.fill();
                };
            }

            // Util
            function getDistance(p1, p2) {
                return Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2);
            }

        });
    </script>

</head>
<body>

<% include statsabove %>

<div id="content-box">
<ul id="menu">
    <li data-menuanchor="home"><a href="#home" class="menuhit">Login</a></li>
    <li data-menuanchor="features"><a href="#features" class="menuhit">Features</a></li>
    <li data-menuanchor="usecases"><a href="#usecases" class="menuhit">Solutions</a></li>
    <li data-menuanchor="about"><a href="#about" class="menuhit">About</a></li>
</ul>
</div>


<div id="fullpage">
    <div class="section" id="section0">
        <canvas id="network-canvas" height="100%" width="100vh"></canvas>
        <div class="ontop">
            <h1>DREAMS</h1>
            <p>The digital network oracle system for lucid dream~weaving.</p>
            <ul class="submenu">
            <li><a href="/login">Enter</a></li>
            <li><a href="/signup">Join</a></li>
            <li><a href="/#about">About</a></li>
            </ul>
       </div>
    </div>
    <div class="section" id="section1">


            <div class="intro">
                <!--<h1>Cognitive Enrichment</h1>-->
                <h1>Discover Patterns</h1>
                <p>Discover the patterns in your dreams.</p>
                <div class="video">
                    <div class="videoclick">
                        <ul class="submenu">
                            <li><a href="https://vimeo.com/126086402" class="demo" data-featherlight="#video5" target="_blank">Demo</a></li>
                        </ul>
                    </div>
                    <div class="videoframe" id="video5">
                        <iframe src="https://player.vimeo.com/video/126086402?autoplay=0&title=0&byline=0&portrait=0" width="270" height="420" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
                    </div>
                </div>
            </div>



    </div>
    <div class="section" id="section2">


            <div class="intro">
                <h1>Lucid Dreaming</h1>
                <p>Lucid dreaming starts from identifying the patterns in dream and redirecting the usual flow of events elsewhere.</p>
                <ul class="submenu">
                    <li><a href="http://noduslabs.com/cases/text-network-visualization-psychotherapy/">Learn More</a></li>
                </ul>
            </div>


    </div>

    <div class="section" id="section3">
        <div class="slide">
            <div class="intro">
                <p>DREAMS.NETWORK runs on <a href="http://www.infranodus.com" target="_blank">InfraNodus</a> tool, which converts text into network to help you discover patterns and meaning in thoughts and ideas.</p>
               <br>
                <p class="smallcaption">Created by agent Paranyushkin / <a href="http://www.noduslabs.com" target="_blank">Nodus Labs</a>. Special thanks to Gabriel Shalom.
                </p>

            </div>
        </div>
        <div class="slide">
            <div class="intro">
                <p class="smallcaption">This free open-source tool is developed by <a href="http://www.noduslabs.com" target="_blank">Nodus Labs</a> (@noduslabs). Contact us to get an <a href="http://noduslabs.com/features/invite/" target="_blank">invitation code</a> to use this online version or install it on your computer from <a href="http://github.com/deemeetree/dreams" target="_blank">GitHub</a>.<br>
                    <br>InfraNodus runs on <a href="http://www.neo4j.org" target="_blank" rel="nofollow">Neo4J</a> graph database, <a href="http://www.sigmajs.org" target="_blank" rel="nofollow">Sigma.Js</a> graph visualization library, Node.Js and uses <a href="http://www.textexture.com" target="_blank">Textexture text network analysis algorithm</a>.
                    <br><br>This software is offered "as is" with no warranty or legal liability of any kind, so, please, use it at your own risk.
                </p>
            </div>
        </div>

    </div>
</div>
<% include statsbelow %>
</body>
</html>
